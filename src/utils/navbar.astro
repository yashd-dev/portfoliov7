---
// BottomNav.astro - Create this as a new component
---

<!-- Bottom navigation bar with glassmorphism -->
<div id="bottom-nav" class="fixed bottom-4 left-0 right-0 z-50 mx-auto w-max">
  <nav
    class="flex items-center justify-between gap-4 md:gap-6 rounded-full bg-white/70 backdrop-blur-md shadow-sm px-4 py-2 border border-white/20"
  >
    <a href="/" class="nav-item group">
      <div class="flex flex-col items-center justify-center">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 text-gray-600 group-hover:text-blue-500 transition-all duration-300 ease-in-out"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
          ></path>
        </svg>
        <span
          class="text-xs mt-0.5 text-gray-600 group-hover:text-blue-500 transition-all duration-300"
          >Home</span
        >
      </div>
    </a>

    <a href="/blog" class="nav-item group">
      <div class="flex flex-col items-center justify-center">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 text-gray-600 group-hover:text-blue-500 transition-all duration-300 ease-in-out"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
          ></path>
        </svg>
        <span
          class="text-xs mt-0.5 text-gray-600 group-hover:text-blue-500 transition-all duration-300"
          >Blog</span
        >
      </div>
    </a>

    <a href="/tech" class="nav-item group">
      <div class="flex flex-col items-center justify-center">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 text-gray-600 group-hover:text-blue-500 transition-all duration-300 ease-in-out"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
          ></path>
        </svg>
        <span
          class="text-xs mt-0.5 text-gray-600 group-hover:text-blue-500 transition-all duration-300"
          >Tech</span
        >
      </div>
    </a>
  </nav>
</div>

<style>
  #bottom-nav {
    opacity: 1;
    transform: translateY(0);
    transition:
      opacity 0.5s ease,
      transform 0.5s ease;
  }

  #bottom-nav.hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
  }

  .nav-item {
    position: relative;
    padding: 0.375rem 0.75rem;
    border-radius: 9999px;
    transition: all 0.3s ease;
  }

  .nav-item:hover {
    transform: translateY(-1px);
  }

  .nav-item.active svg,
  .nav-item.active span {
    color: #3b82f6;
  }

  .nav-item::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 2px;
    background-color: #3b82f6;
    transition:
      width 0.3s ease,
      transform 0.3s ease;
    transform: translateX(-50%);
  }

  .nav-item.active::after {
    width: 40%;
  }
</style>

<script>
  // Handle active state based on current path
  document.addEventListener("DOMContentLoaded", () => {
    const path = window.location.pathname;
    const navItems = document.querySelectorAll(".nav-item");

    // Function to check if link should be active
    const shouldBeActive = (href: string) => {
      if (href === "/") {
        return path === "/";
      } else {
        return path.startsWith(href);
      }
    };

    // Set active state
    navItems.forEach((item) => {
      const href = item.getAttribute("href");
      if (shouldBeActive(href)) {
        item.classList.add("active");
      }
    });

    // Much smoother hide/show based on scroll direction
    let lastScrollTop = 0;
    let scrollTimer: ReturnType<typeof setTimeout> | null = null;
    const nav = document.getElementById("bottom-nav");

    window.addEventListener("scroll", () => {
      const scrollTop =
        window.pageYOffset || document.documentElement.scrollTop;

      // Clear the timer if it exists
      if (scrollTimer !== null) {
        clearTimeout(scrollTimer);
      }

      if (scrollTop > lastScrollTop && scrollTop > 100) {
        // Scrolling down & past threshold - add with delay
        nav.classList.add("hidden");
      } else {
        // Scrolling up - remove immediately for better responsiveness
        nav.classList.remove("hidden");
      }

      // Set a timer to check if scrolling has stopped
      scrollTimer = setTimeout(() => {
        // Show the nav after scrolling stops
        nav.classList.remove("hidden");
      }, 1500);

      lastScrollTop = scrollTop;
    });
  });
</script>
